/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package CGAL.Polyline_simplification_2;

  import CGAL.Kernel.Point_2;
  import CGAL.Kernel.Polygon_2;
  import java.util.Iterator;
  import java.util.Collection;

public class CGAL_Polyline_simplification_2 {
  public static Polygon_2 simplify(Polygon_2 polygon, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_0(Polygon_2.getCPtr(polygon), polygon, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_1(input, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_2(input, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_3(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_4(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_5(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Hybrid_squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_6(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_7(Polygon_2.getCPtr(polygon), polygon, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_8(input, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_9(input, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_10(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_11(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_12(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Hybrid_squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_13(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_14(Polygon_2.getCPtr(polygon), polygon, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_15(input, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_16(input, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_17(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_18(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_19(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Hybrid_squared_distance_cost cost, Stop_below_count_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_20(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Hybrid_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_21(Polygon_2.getCPtr(polygon), polygon, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_22(input, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_23(input, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_24(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_25(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_26(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Scaled_squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_27(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_28(Polygon_2.getCPtr(polygon), polygon, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_29(input, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_30(input, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_31(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_32(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_33(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Scaled_squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_34(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_35(Polygon_2.getCPtr(polygon), polygon, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_36(input, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_37(input, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_38(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_39(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_40(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Scaled_squared_distance_cost cost, Stop_below_count_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_41(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Scaled_squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_42(Polygon_2.getCPtr(polygon), polygon, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Squared_distance_cost cost, Stop_above_cost_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_43(input, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Squared_distance_cost cost, Stop_above_cost_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_44(input, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Squared_distance_cost cost, Stop_above_cost_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_45(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_46(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Squared_distance_cost cost, Stop_above_cost_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_47(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Squared_distance_cost cost, Stop_above_cost_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_48(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Squared_distance_cost.getCPtr(cost), cost, Stop_above_cost_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_49(Polygon_2.getCPtr(polygon), polygon, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_50(input, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_51(input, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_52(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_53(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_54(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Squared_distance_cost cost, Stop_below_count_ratio_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_55(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_ratio_threshold.getCPtr(stop), stop);
  }

  public static Polygon_2 simplify(Polygon_2 polygon, Squared_distance_cost cost, Stop_below_count_threshold stop) {
    return new Polygon_2(CGAL_Polyline_simplification_2JNI.simplify__SWIG_56(Polygon_2.getCPtr(polygon), polygon, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop), true);
  }

  public static void simplify(Iterator<Point_2> input, Squared_distance_cost cost, Stop_below_count_threshold stop, Collection<Point_2> output, boolean close) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_57(input, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, output, close);
  }

  public static void simplify(Iterator<Point_2> input, Squared_distance_cost cost, Stop_below_count_threshold stop, Collection<Point_2> output) {
    CGAL_Polyline_simplification_2JNI.simplify__SWIG_58(input, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, output);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Squared_distance_cost cost, Stop_below_count_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_59(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, Squared_distance_cost cost, Stop_below_count_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_60(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Squared_distance_cost cost, Stop_below_count_threshold stop, boolean keep_points) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_61(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop, keep_points);
  }

  public static int simplify(PS2_Constrained_Delaunay_triangulation_plus_2 ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id cid, Squared_distance_cost cost, Stop_below_count_threshold stop) {
    return CGAL_Polyline_simplification_2JNI.simplify__SWIG_62(PS2_Constrained_Delaunay_triangulation_plus_2.getCPtr(ct), ct, PS2_Constrained_Delaunay_triangulation_plus_2_Constraint_id.getCPtr(cid), cid, Squared_distance_cost.getCPtr(cost), cost, Stop_below_count_threshold.getCPtr(stop), stop);
  }

}
